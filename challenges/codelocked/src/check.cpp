int ok[] = {0x58,0x54,0x06,0x05,0x00,0x0a,0x4d,0x41,0x03,0x53,0x00,0x00,0x07,0x0a,0x5b,0x0e,0x01,0x48,0x6b,0x04,0x07,0x66,0x70,0x63,0x7e,0x4c};
int ok2[] = {0x58,0x54,0x06,0x05,0x00,0x0a,0x4d,0x41,0x03,0x53,0x00,0x00,0x07,0x0a,0x5b,0x0e,0x01,0x48,0x6b,0x04,0x07,0x66,0x70,0x63,0x7e,0x4c};
int nok[] = {0x59,0x6f,0x75,0x20,0x64,0x69,0x64,0x20,0x6e,0x6f,0x74,0x20,0x6f,0x70,0x65,0x6e,0x20,0x74,0x68,0x65,0x20,0x6c,0x6f,0x63,0x6b,0x21};

typedef long int i32;
extern "C" {


	void decode(int code[]) {
		for (int i = 0; i < 26; i++) {
			int pos = (i + 4) % 8;
			ok2[i] = (ok[i] ^ code[pos]) ;
		}
		for (int i = 0; i < 26; i++) {
			code[i] = ok2[i];
		}
		return;
	}

	void fail(int code[]) {
		for (int i = 0; i < 26; i++) {
			code[i] = nok[i];
		}
		return;
	}

	void check(int code[]) {
		int i = 48;
		if(code[0] != (i + 2)) {
			fail(code);
			return;
		}
		i = code[0];
		if (code[1] == (i + 7)) {
			i = code[1];
			if (code[2] != (i - 3)) {
				fail(code);
				return;
			} 
			i = code[2];
			if (code[3] == i) {
				if (code[4] == (i - 6)) {
					if (code[5] == i - 5 && code[6] == (i - 2) && code[7] == (i -1)) {
						decode(code);
						return;
					}
				}
			}

		} else {
			fail(code);
			return;
		}
		fail(code);
		return;
	}
}